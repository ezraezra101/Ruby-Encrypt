#!/usr/bin/env ruby

class String
  # colorization
  # borrowed from http://stackoverflow.com/questions/1489183/colorized-ruby-output
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(91) #or 31
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def pink
    colorize(35)
  end
end

def test()
  begin
    raise "specialerror"
  rescue RuntimeError, "specialerror"
    puts "error".red
  end
end
def test0()
  raise RuntimeError, "specialerror", caller
end
def test2()
  catch ("Testing") do
    $x="Thrown?".green
    throw "Testing"
    $x="NoThrow".red
  end
  puts $x
end
#test()
#test2()


class Testin
  @@atat="atat str"
  @at="at str"
  def atat() #Should have used attr_accessor :atat, :at in initializer (I think)
    @@atat
  end
  def at()
    @at
  end
  def setat(new_at)
    @at=new_at
  end
  def setatat(new_atat)
    @@atat=new_atat
  end
end
def testin_class()
  class_test=Testin.new()
  class_test.setat("test0 setting at")
  class_test1=Testin.new()

  class_test1.setat("test1 setting at")
  puts class_test.at

  class_test.setatat("test1 setting atat")
  puts class_test.atat
end
#testin_class()
#=>test0 setting at
#=>test1 setting atat


class Testingish
  def initialize()
    @var1=1
    @var2=2
  end
  def var1()
    @var1
  end
  def var2()
    @var2
  end
  def return(x=@var2)
    if x != nil
      x+1
    else
      x
    end
  end
end
def run_testingish()
  object=Testingish.new()
  puts object.return.to_s
  puts object.return(@var2).to_s
  puts object.return(@var1).to_s
  puts object.return(3).to_s
end
#run_testingish()
#=>3
#=>
#=>
#=>4


unless Kernel.respond_to?(:require_relative)
  #borrowed from: http://stackoverflow.com/questions/4333286/ruby-require-vs-require-relative-best-practice-to-workaround-running-in-both
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

require_relative 'RubyEncryptCode.rb'
#include("RubyEncryptCode")

rsa=RSA_encrypt.new()
rsa.make(17)
rsa.keyclear()
puts rsa.keysnil?




def recursive()
  def recursive()
    puts "hi"
  end
end
recursive()
print "Ran recursive once\n"
recursive()


#printing unprintable characters
def stringfun(string)
  concatenation=""
  string.each_byte do |c|
    if c >=040 and c<=0177 and c != 0134 and c!= 040 #"\" ascii code== 0134 and " " ascii code is 040
      concatenation << c.chr
    else
      puts c
      concatenation << "\\"+c.to_s+" "
    end
  end
  puts concatenation
end
def undo_stringfun(string)
  char_current=0
  output=""
  while char_current<string.length
    if string[char_current]==0134
      catch :charend
        tempcharcode=""
        while true
          char_current=char_current+1
          if string[char_current]==040 # " " ascii code
            throw :charend
          end
          tempcharcode << string[char_current,char_current]

        end

      
    else
      output << string[char_current].chr
    end
    char_current+=1
