#!/usr/bin/env ruby
def rotate_13(input="hello world")
  decode= ''
  ascii=[]
  #converts to ascii
  input.each_byte do |c|
    ascii << c
  end

  for i in 0..ascii.length-1
    #Capital Letters
    if ascii[i]>=65 and ascii[i] <=90
      ascii[i]+=13
      if ascii[i]>90
        ascii[i] += -26
      end
    #lower case letters
    elsif ascii[i]>=97 and ascii[i]<=122
      ascii[i] +=13
      if ascii[i]>122
        ascii[i] += -26
      end
    end
    decode << ascii[i].chr
  end
  decode
end


def pi_encrypt(input='hello world', to_code=true,seed=0)
  source = 3.1415926535897932384626433
  decode= ''
  ascii=[]
  #This picks whether you're doing or undoing code
  case to_code
    when false
      to_code_coefficient= -1
    when true
      to_code_coefficient = 1
  end
  #converts to ascii
  input.each_byte do |c|
    ascii << c
  end

  #Encodes/decodes and converts back to text
  splitsource =source.to_s.split(%r{\s*}) - ['.']
  for i in 0..ascii.length-1
    ascii[i] += to_code_coefficient * splitsource[i+seed].to_i
    decode << ascii[i].chr
  end
  decode
end


class RSA_encrypt
  def make(e)
    primes=primegen()
    $n, $d = self.keygen(e,primes)
    $e=e
  end

  def primegen()
    primes = [61,53,23]
    #primes = [11,13]
    primes
  end

  def keygen(e,primes)
    n=1
    totient=1
    #semiarbitrary=15 #15 is the only value that works for primes=[61,53]

    for i in 0..primes.length-1
      n*=primes[i]
      totient*=primes[i]-1
    end
    i=0
    while (i*totient+1)%e != 0
      i+=1
    end
    d= (totient*i + 1)/e

    privatekey=[n,d]
    publickey=[n,e]
    privatekey
  end

  def encrypt(input, n, e)
    output=(input**e)%n
    output
  end

  def decrypt(input, n, d)
    output=(input**d)%n
    output
  end
  def test(mesg=65,e=17)
    self.make(e)
    encrypted=self.encrypt(mesg,$n,$e)
    puts mesg
    puts "encrypted"
    puts encrypted
    puts "decrypted"
    puts self.decrypt(encrypted,$n,$d)
    puts "keys"
    puts $n
    puts $d
    puts $e
    puts "*********"
  end
end

def shrink_mesg_1(mesg)
  ascii=[]
  shrinked=0
  #converts to ascii
  mesg.each_byte do |c|
    ascii << c
  end
  #converts ascii into a integer, basically it concatinates what ascii is in base 128
  length=ascii.length
  for i in 1..length
    shrinked+=ascii[length-i]*128**(i-1)
  end
  shrinked
end

def shrink_message(mesg)
  ascii=[]
  shrinked=''
  #converts to ascii
  mesg.each_byte do |c|
    ascii << c
  end
  for i in 0..ascii.length-1
    byte_letter = ascii[i].to_s(2)
    if byte_letter.length < 7
      for x in 1..7-byte_letter.length
        byte_letter='0'+byte_letter
      end
    end
    shrinked << byte_letter

    #shrinked+=ascii[i]*128**(i)
  end
  shrinked.to_i(2)
end

def unshrink(mesg)
  decode=''
  ascii=[]
  mesg=mesg.to_s(2)
  for i in 0..mesg.length/7-1
    ascii << mesg[i*7,7].to_i(2)
    decode << ascii[i].chr
    #ascii[i]=mesg % (128**i)
    #mesg=(mesg-ascii[i])/128
    #decode << ascii[i].chr
  end
  decode
end

#This should take user input
def run()
  STDOUT.flush
  puts 'Paste your message in here'
  input = gets.chomp
  puts 'Are you doing a rotate 13 cipher? Y/N'
  typeofencode=gets.chomp
  case typeofencode
  when 'Y', 'y', 'yes', 'Yes'
    to_code=13
    puts 'Here is your encrypted text:'
    puts rotate_13(input)
  else
    puts 'What is your seed? (0 for none)'
    seed=gets.chomp.to_i
    puts 'Are you decoding? Y/N'
    encoding=gets.chomp
    case encoding
    when 'Y', 'y', 'yes', 'Yes'
      to_code=true
    else
      to_code=false
    end
    puts 'Here is your encrypted text:'
    puts pi_encrypt(input,to_code,seed)
  end
  puts 'would you like to encode more? Y/N'
  again=gets.chomp
  case again
  when 'Y', 'y', 'yes', 'Yes'
    run()
  else
    puts 'Bye'
  end
end

def RSA_runtest()
  STDOUT.flush
  rsa=RSA_encrypt.new()
  rsa.make(17)
  puts "Input Message"
  mesg=gets.chomp
  mesg_int=shrink_message(mesg)
  encrypted=rsa.encrypt(mesg_int,$n,$e)
  puts "encrypted"
  puts encrypted
  decrypted=rsa.decrypt(encrypted,$n,$d)
  puts "Decrypted integer"
  puts decrypted
  puts "Decrypted message"
  puts unshrink(decrypted)
  puts "again? Y/N"
  again=gets.chomp
  if again=="Y" or "y" or "Yes" or "yes"
    RSA_runtest()
  end
end


RSA_runtest()
run()



#Will's gui code:
Shoes.app :width=>400, :height=>340 do
  flow do
    @e=edit_line
    button "Go!" do
      @abc.text = encode(@e.text,13)
    end
    @abc=edit_line
  end
end

